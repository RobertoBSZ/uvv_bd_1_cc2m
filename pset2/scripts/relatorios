/* Colaboradores: Pedro Lima e Yuri Soares
   Turma: CC2M
   Professor: Abrantes
   
   		Este script contém todos os SELECT's das questões 1 a 15 da atividade pset2 do professor Abrantes, formando todos os relatórios
   exigidos em cada questão.
*/

-- 1º Questão: Um relatório que mostra a média salarial dos funcionários em cada departamento.
SELECT d.nome_departamento AS departamento, CAST(AVG(f.salario) AS DECIMAL (10, 2)) AS média_salarial
FROM funcionario AS f, departamento AS d
WHERE (f.numero_departamento = d.numero_departamento)
GROUP BY d.nome_departamento;

-- 2º Questão: Um relatório que mostra a média salarial dos homens e das mulheres.
SELECT (case when (f.sexo='M') then 'Masculino' when (f.sexo='F') then 'Feminino' end) AS sexo, CAST(AVG(salario) AS DECIMAL (10, 2)) AS média_salarial
FROM funcionario AS f
WHERE (sexo = 'M')
GROUP BY f.sexo
UNION 
SELECT (case when (f.sexo='M') then 'Masculino' when (f.sexo='F') then 'Feminino' end) AS sexo, CAST(AVG(salario) AS DECIMAL (10, 2)) 
FROM funcionario AS f
WHERE (sexo = 'F')
GROUP BY f.sexo;

-- 3º Questão: Um relatório que mostra o nome dos departamentos e as seguintes informações dos seus respectivos funcionários: o nome completo, a data de nascimento, a idade em anos completos e o salário.
SELECT departamento.nome_departamento AS departamento, (funcionario.primeiro_nome||' '|| funcionario.nome_meio||' '|| funcionario.ultimo_nome) AS nome, funcionario.data_nascimento, DATE_PART('year', AGE(funcionario.data_nascimento)) AS idade, funcionario.salario
FROM departamento 
INNER JOIN funcionario ON (departamento.numero_departamento = funcionario.numero_departamento);

-- 4º Questão: Um relatório que mostra o nome completo dos funcionários, a idade em anos completos, o salário atual e o salário reajustado com as seguintes condições (Se o salário do funcionário for menor que 35.000, deve haver um reajuste de 20%, e se for igual ou superior, de 15%).
SELECT (primeiro_nome||' '|| nome_meio||' '|| ultimo_nome) AS nome, DATE_PART('year', AGE(data_nascimento))AS idade, CAST(salario AS DECIMAL (10, 2)), CAST(salario*1.2 AS DECIMAL (10,2)) AS salario_reajustado 
FROM funcionario 
WHERE (salario < 35000) 
UNION 
SELECT DISTINCT (primeiro_nome||' '|| nome_meio||' '|| ultimo_nome) AS nome, DATE_PART('year', AGE(data_nascimento)) AS idade, CAST(salario AS DECIMAL (10, 2)), CAST(salario*1.15 AS DECIMAL (10, 2)) AS salario_reajustado 
FROM funcionario 
WHERE (salario >= 35000);

--5º Questão: Um relatório que mostra, de cada departamento, o nome do gerente e o nome de seus funcionários, ordenado por nome do departamento (em ordem crescente) e por salário dos funcionários (em ordem decrescente).
SELECT d.nome_departamento as departamento, (f.primeiro_nome||' '|| f.nome_meio||' '|| f.ultimo_nome) AS nome, f.salario, (CASE WHEN(d.numero_departamento = f.numero_departamento AND d.cpf_gerente=f.cpf) THEN '*' END) AS gerente
FROM funcionario AS f, departamento AS d 
WHERE (d.numero_departamento = f.numero_departamento)
ORDER BY d.nome_departamento ASC, f.salario DESC;

--6º Questão: Um relatório que mostra o nome completo dos funcionários que POSSUEM dependentes, os departamentos onde trabalham e o nome completo de seus dependentes, a idade deles em ANOS e o sexo (aparecendo Masculino em vez de M e Feminino em vez de F).
SELECT (f.primeiro_nome||' '|| f.nome_meio||' '|| f.ultimo_nome) AS nome_funcionario, d.nome_departamento as departamentos, dp.nome_dependente, (CASE WHEN(dp.sexo = 'M')THEN 'Masculino' WHEN(dp.sexo = 'F')THEN 'Feminino'END) AS sexo, DATE_PART('year', AGE(dp.data_nascimento)) AS idade
FROM funcionario AS f, dependente AS dp, departamento AS d
WHERE (f.cpf = dp.cpf_funcionario AND f.numero_departamento = d.numero_departamento);

--7º Questão: Um relatório que mostra o nome completo dos funcionários que NÃO POSSUEM dependentes, os departamentos onde trabalham e seu salário.
SELECT (f.primeiro_nome||' '|| f.nome_meio||' '|| f.ultimo_nome) AS nome, d.nome_departamento AS departamento, f.salario
FROM funcionario AS f, departamento AS d
WHERE f.cpf NOT IN (SELECT d.cpf_funcionario FROM dependente AS d) AND (d.numero_departamento= f.numero_departamento);

--8º Questão: Um relatório que mostra os projetos de cada departamento e os funcionários que estão trabalhando NO PROJETO, e o número de horas trabalhadas por cada funcionário em cada projeto.
SELECT d.nome_departamento AS departamento, p.nome_projeto as projeto, (f.primeiro_nome||' '|| f.nome_meio||' ' ||f.ultimo_nome) AS nome, t.horas
FROM funcionario AS f
INNER JOIN trabalha_em AS t
ON (f.cpf = t.cpf_funcionario)
INNER JOIN projeto AS p
ON (t.numero_projeto = p.numero_projeto)
INNER JOIN departamento AS d
ON (p.numero_departamento = d.numero_departamento)
ORDER BY d.nome_departamento ASC, p.nome_projeto ASC;

--9º Questão: Um relatório que mostra a soma total das horas de cada projeto em cada departamento, exibindo o nome do departamento, o nome do projeto e a soma total das horas.
SELECT d.nome_departamento AS departamento, p.nome_projeto AS projeto, SUM(t.horas) AS total_horas
FROM funcionario AS f
INNER JOIN trabalha_em AS t
ON (f.cpf = t.cpf_funcionario)
INNER JOIN projeto AS p
ON (t.numero_projeto = p.numero_projeto)
INNER JOIN departamento AS d
ON (p.numero_departamento = d.numero_departamento)
GROUP BY d.nome_departamento, p.nome_projeto
ORDER BY d.nome_departamento;

--10º Questão: Um relatório que mostra a média salarial dos funcionários em cada departamento (mesma coisa que a primeira questão!).
SELECT d.nome_departamento AS departamento, CAST(AVG(f.salario) AS DECIMAL (10, 2)) AS média_salarial
FROM funcionario AS f, departamento AS d
WHERE (f.numero_departamento = d.numero_departamento)
GROUP BY d.nome_departamento;

--11º Questão: Um relatório que mostra o nome completo do funcionário, o nome do projeto, e o valor total que o funcionário recebe (sabendo que o valor pago é de 50 reais a hora).
SELECT (f.primeiro_nome||' '|| f.nome_meio||' '|| f.ultimo_nome) AS nome, p.nome_projeto AS projeto, CAST (t.horas * 50 AS DECIMAL(10,2)) AS total_valor
FROM funcionario AS f
INNER JOIN trabalha_em AS t
ON (f.cpf = t.cpf_funcionario)
INNER JOIN projeto AS p
ON (t.numero_projeto = p.numero_projeto);

--12º Questão: Um relatório que mostra o nome do departamento, o nome do projeto, e o nome do funcionário que, mesmo estando em um projeto, não tem nenhuma hora trabalhada registrada.
SELECT d.nome_departamento AS departamento, p.nome_projeto AS projeto, (f.primeiro_nome||' '|| f.nome_meio||' '|| f.ultimo_nome) AS nome
FROM funcionario AS f
INNER JOIN departamento AS d
ON f.numero_departamento = d.numero_departamento
INNER JOIN trabalha_em AS t
ON f.cpf = t.cpf_funcionario
INNER JOIN projeto AS p
ON t.numero_projeto = p.numero_projeto
WHERE t.horas IS NULL;

--13º Questão: Um relatório que mostra o nome completo dos funcionários e dependentes, o sexo deles e a idade em anos completos(para todos receberem um presente adequado!), sendo esse relatório ordenado pela idade em anos completos, de forma decrescente.
SELECT (f.primeiro_nome||' '|| f.nome_meio||' '|| f.ultimo_nome) AS nome, (case when (f.sexo='M') then 'Masculino' when (f.sexo='F') then 'Feminino'end) as sexo, DATE_PART('year', AGE(f.data_nascimento)) AS idade
FROM funcionario AS f
UNION
SELECT d.nome_dependente, (case when (d.sexo='M') then 'Masculino' when (d.sexo='F') then 'Feminino'end) as sexo, DATE_PART('year', AGE(d.data_nascimento)) AS idade
FROM dependente AS d
ORDER BY idade DESC;

--14º Questão: Um relatório que mostra quantos funcionários cada departamento tem.
SELECT d.nome_departamento AS departamento, COUNT(f.cpf) AS quantidade_funcionarios
FROM funcionario AS f
INNER JOIN departamento AS d
ON (f.numero_departamento = d.numero_departamento)
GROUP BY d.nome_departamento;

--15º Questão: Um relatório que mostra o nome completo do funcionário, o departamento do mesmo, e o nome dos projetos que cada funcionário está alocado(OBS: Se houver algum funcionário que não está alocado em nenhum projeto, o nome completo e o departamento também aparecem no relatório).
SELECT (f.primeiro_nome||' '|| f.nome_meio||' '|| f.ultimo_nome) AS nome, d.nome_departamento AS departamento, p.nome_projeto AS projeto
FROM funcionario AS f
INNER JOIN trabalha_em AS t
ON f.cpf = t.cpf_funcionario
INNER JOIN projeto AS p
ON t.numero_projeto = p.numero_projeto
INNER JOIN departamento AS d
ON f.numero_departamento = d.numero_departamento
ORDER BY nome;
